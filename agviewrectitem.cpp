#include "agviewrectitem.h"

#include <QSettings>

#include "agcliprectitem.h"
#include "aglobal.h"
#include "agtagtextitem.h"
#include "agview.h" //for the constants
#include "aexport.h"

#include <QDesktopServices>
#include <QGraphicsItemAnimation>
#include <QStyle>
#include <QTabWidget>
#include <QTextBrowser>
#include <QVBoxLayout>

#include <QTimeLine>

#include <QMessageBox>

AGViewRectItem::AGViewRectItem(QGraphicsItem *parent, QFileInfo fileInfo) :
    QGraphicsRectItem(parent)
{
    this->mediaType = "Unknown";
    this->itemType = "Base";

    this->fileInfo = fileInfo;
    setData(folderNameIndex, fileInfo.absolutePath());
    setData(fileNameIndex, fileInfo.fileName());

    this->parentRectItem = (AGViewRectItem *)parent;

    this->setFlag(QGraphicsItem::ItemIsSelectable);
    this->setAcceptHoverEvents(true);

    fileContextMenu = new QMenu();
//    setContextMenuPolicy(Qt::CustomContextMenu);
    fileContextMenu->setToolTipsVisible(true);

//    fileContextMenu->eventFilter()

    QPalette pal = fileContextMenu->palette();
    QColor menuColor;
    if (QSettings().value("theme") == "Black")
    {
        menuColor = QColor(41, 42, 45);//80,80,80);
        fileContextMenu->setStyleSheet(R"(
                                   QMenu::separator {
                                    background-color: darkgray;
                                   }
                                       QMenu {
                                        border: 1px solid darkgray;
                                       }

                                 )");
    }
    else
        menuColor = pal.window().color();

    pal.setColor(QPalette::Base, menuColor);
    pal.setColor(QPalette::Window, menuColor);
    fileContextMenu->setPalette(pal);
}

void AGViewRectItem::setItemProperties(QString mediaType, QString itemType, int duration, QSize mediaSize)
{
    setData(itemTypeIndex, itemType);
    setData(mediaTypeIndex, mediaType);

    setData(mediaDurationIndex, duration);
    setData(mediaWithIndex, mediaSize.width());
    setData(mediaHeightIndex, mediaSize.height());

    updateToolTip();
}

void AGViewRectItem::updateToolTip()
{
    QString tooltipText = "";

    QString commandControl = "Ctrl-";
#ifdef Q_OS_MAC
    commandControl = "âŒ˜-";
#endif

    AGViewRectItem *tooltipItem = this;
    if (data(itemTypeIndex).toString().contains("Sub"))
        tooltipItem = (AGViewRectItem *)parentItem();

    if (tooltipItem->data(mediaTypeIndex) == "Folder")
    {
        tooltipText += tr("<p><b>Folder %1</b></p>"
                       "<p><i>Folder with its subfolders and media files. Only <b>folders containing mediafiles</b> are shown</i></p>"
                       ).arg(tooltipItem->fileInfo.absoluteFilePath());
        tooltipText += tr(
                    "<ul>"
                          "<li><b>Media Sidekick recycle bin</b>: Right click / Open in explorer will show the Media Sidekick recycle bin</li>"
                      "</ul>"
        );
    }
    else if (tooltipItem->data(mediaTypeIndex) == "FileGroup")
    {
        tooltipText += tr("<p><b>%1 Files in folder %2</b></p>"
                          "<ul>"
                          ).arg(tooltipItem->fileInfo.fileName(), tooltipItem->fileInfo.absolutePath());
        if (tooltipItem->fileInfo.fileName() == "Video")
            tooltipText += tr("<li><b>Supported Video files</b>: %1</li>"
                              "</ul>").arg(AGlobal().videoExtensions.join(","));
        else if (tooltipItem->fileInfo.fileName() == "Audio")
            tooltipText += tr("<li><b>Supported Audio files</b>: %1</li>"
                              "</ul>").arg(AGlobal().audioExtensions.join(","));
        else if (tooltipItem->fileInfo.fileName() == "Image")
            tooltipText += tr("<li><b>Supported Image files</b>: %1</li>"
                              "</ul>").arg(AGlobal().imageExtensions.join(","));
        else if (tooltipItem->fileInfo.fileName() == "Export")
            tooltipText += tr("<li><b>Export files</b>: Videos generated by Media Sidekick (lossless or encode). Can be openened by common video players, uploaded to social media etc.</li>"
                              "<li><b>Supported Export methods</b>: %1</li>"
                              "<li><b>Supported Export files</b>: %2</li>"
                              "</ul>").arg(AGlobal().exportMethods.join(","), AGlobal().exportExtensions.join(","));
        else if (tooltipItem->fileInfo.fileName() == "Project")
            tooltipText += tr("<li><b>Project files</b>: generated by Media Sidekick. Can be openened by video editors. Currently Shotcut and Premiere.</li>"
                              "<li><b>Supported Export methods</b>: %1</li>"
                              "<li><b>Supported Export files</b>: %2</li>"
                              "</ul>").arg(AGlobal().exportMethods.join(","), AGlobal().projectExtensions.join(","));
        else if (tooltipItem->fileInfo.fileName() == "Parking")
            tooltipText += tr("<li><b>Parking</b>: Mediafiles or clips which do not match the filter criteria are moved here (see the search field).</li>"
                              "<li><b>Timeline view</b>: Mediafiles without clips are moved to the parking (In spotview they are shown in the video and audio group).</li>"
                              "</ul>");
        else
            tooltipText += tr("<li><b>Group</b>: %2</li>"
                              "</ul>").arg(tooltipItem->fileInfo.fileName());
    }
    else if (tooltipItem->data(mediaTypeIndex) == "TimelineGroup")
    {
        tooltipText += tr("<p><b>Timeline group of %1 of folder %2</b></p>"
                       "<p><i>Showing all clips next to each other</i></p>"
                          "<ul>"
                          "<li><b>Sorting</b>: Currently sorted in order of mediafiles and within a mediafile, sorted chronologically</li>"
                          "<li><b>Transition</b>: If transition defined (%3) then clips overlapping.</li>"
                          ).arg(tooltipItem->parentRectItem->fileInfo.fileName(), tooltipItem->fileInfo.absolutePath(), AGlobal().frames_to_time(QSettings().value("transitionTime").toInt()));
        tooltipText += tr("<li><b>zValue</b>: %1</li>").arg(QString::number(tooltipItem->zValue()));

    }
    else if (tooltipItem->data(mediaTypeIndex) == "MediaFile")
    {
        AGMediaFileRectItem *mediaItem = (AGMediaFileRectItem *)tooltipItem;
        tooltipText += tr("<p><b>Media file %1</b></p>"
                       "<p><i></i></p>"
                          "<p><b>Properties</p>"
                       "<ul>"
                          "<li><b>File size</b>: %2</li>"
                          "<li><b>Create date</b>: %3</li>").arg(tooltipItem->fileInfo.fileName()
                                                                 , QString::number(fileInfo.size()/1024/1024) + " MB", tooltipItem->data(createDateIndex).toString());

        if (tooltipItem->data(mediaDurationIndex).toInt() != 0)
        {
            tooltipText += tr("<li><b>Duration</b>: %1 (%2 s)</li>").arg(AGlobal().msec_to_time(tooltipItem->data(mediaDurationIndex).toInt()), QString::number(tooltipItem->data(mediaDurationIndex).toInt() / 1000.0));
        }

        if (tooltipItem->data(mediaWithIndex).toInt() != -1)
            tooltipText += tr("<li><b>Size</b>: %1 * %2</li>").arg(QString::number(tooltipItem->data(mediaWithIndex).toInt()), QString::number(tooltipItem->data(mediaHeightIndex).toInt()));

        tooltipText += tr("</ul>"
            "<p><b>Help</p>"
            "<ul>"
                          "<li><b>Duration line</b>: Red or green line above. Allows comparison of duration of media files and clips</li>"
                          "<li><b>Progress line</b>: Red line below</li>"
                          "<li><b>Change playing position</b>: Shift-Hover over %1</li>"
                          "</ul>"
            ).arg(tooltipItem->data(mediaTypeIndex).toString());
    }
    else if (tooltipItem->data(mediaTypeIndex) == "Clip")
    {
        AGClipRectItem *clipItem = (AGClipRectItem *)tooltipItem;
        tooltipText += tr("<p><b>Clip from %3 to %4</b></p>"
                       "<ul>"
             "<li><b>Duration</b>: %1 (%2 s)</li>"
                       "</ul>").arg(AGlobal().msec_to_time(tooltipItem->data(mediaDurationIndex).toInt()), QString::number(tooltipItem->data(mediaDurationIndex).toInt() / 1000.0)
                                    , AGlobal().msec_to_time(clipItem->clipIn), AGlobal().msec_to_time(clipItem->clipOut)
                         );

        tooltipText += tr("</ul>"
            "<p><b>Help</p>"
            "<ul>"
                          "<li><b>Change playing position</b>: Shift-Hover over %1</li>"
                          "</ul>"
            ).arg(tooltipItem->data(mediaTypeIndex).toString());
    }
    else if (tooltipItem->data(mediaTypeIndex) == "Tag")
    {
        AGTagTextItem *tagItem = (AGTagTextItem *)tooltipItem;
        tooltipText += tr("<p><b>Rating, Tags and alike %1</b></p>"
                       "<p><i>Rating from * to *****, alike indicator or tag</i></p>"
                       "<ul>"
                       "</ul>"
            "<p><b>Actions</p>"
            "<ul>"
                          "<li><b>Remove</b>: Drag to bin (in next version of Media Sidekick)</li>"
            "</ul>").arg(tagItem->tagName);
    }

    if (tooltipText != "")
        setToolTip(tooltipText);
}

QString AGViewRectItem::itemToString()
{
    return fileInfo.absoluteFilePath() + " " + data(itemTypeIndex).toString() + " " + data(mediaTypeIndex).toString();// + " " + QString::number(item->zValue());
}

QVariant AGViewRectItem::itemChange(GraphicsItemChange change, const QVariant &value)
{
    if (change == ItemPositionHasChanged && scene())
    {
        qDebug()<<"AGViewRectItem::itemChange"<<change<<value;
//        emit agItemChanged(this);
    }

    return QGraphicsRectItem::itemChange(change, value);
}

//https://forum.qt.io/topic/32869/solved-resize-qgraphicsitem-with-drag-and-drop/3

void AGViewRectItem::mousePressEvent(QGraphicsSceneMouseEvent *event)
{
//    qDebug()<<"AGViewRectItem::mousePressEvent"<<event;
    QGraphicsRectItem::mousePressEvent(event); //triggers itemselected
}

void AGViewRectItem::hoverMoveEvent(QGraphicsSceneHoverEvent *event)
{
//    qDebug()<<"AGViewRectItem::hoverMoveEvent"<<event<<this->fileInfo.fileName();

//    qDebug()<<"emit hoverPositionChanged"<<data(clipInIndex).toInt()<<data(clipOutIndex).toInt()<<event->pos()<<draggedWidth<<event->pos().x()/double(draggedWidth);

    if(event->modifiers() == Qt::ShiftModifier)
    {
//        if (event->pos().y() > rect().height() * 0.7) //only hover on timeline
        {
            int progress;

            if (mediaType == "Clip")
            {
                AGClipRectItem *clipItem = (AGClipRectItem *)this;

//                qDebug()<<"clipItem"<<clipItem->itemToString()<<clipItem->clipIn<<clipItem->clipOut;

                progress = clipItem->clipIn + (clipItem->clipOut - clipItem->clipIn) * event->pos().x()/rect().width();
            }
            else
                progress = data(mediaDurationIndex).toInt() * event->pos().x()/rect().width();

//            qDebug()<<"AGViewRectItem::hoverMoveEvent"<<progress<<data(mediaDurationIndex).toInt()<<event->pos().x()/rect().width();

            emit hoverPositionChanged(this, progress);
        }
    }

    QGraphicsRectItem::hoverMoveEvent(event);
}

void AGViewRectItem::recursiveFileRenameCopyIfExists(QString folderName, QString fileName)
{
    bool success;
    QFile file(folderName + fileName);
    if (file.exists())
    {
        qDebug()<<"AFilesTreeView::recursiveFileRenameCopyIfExists"<<fileName<<fileName.left(fileName.lastIndexOf(".")) + "BU." + fileInfo.suffix();

        recursiveFileRenameCopyIfExists(folderName, fileName.left(fileName.lastIndexOf(".")) + "BU." + fileInfo.suffix());

        success = file.rename(folderName + fileName.left(fileName.lastIndexOf(".")) + "BU." + fileInfo.suffix());
    }
}

void AGViewRectItem::processAction(QString action)
{
    AGView *agView = (AGView *)scene()->views().first();

    if (action.contains("Export"))
    {
        if (agView->isLoading)
            QMessageBox::information(agView, "Export", tr("View is loading, wait until finished"));
        else
        {
            MExportDialog *exportDialog = new MExportDialog(nullptr, this);
            exportDialog->processes = &processes;
            exportDialog->show();
            connect(exportDialog, &MExportDialog::processOutput, this, &AGViewRectItem::onProcessOutput);
            connect(exportDialog, &MExportDialog::transitionTimeChanged, agView, &AGView::onTransitionTimeChanged);
        }
    }
}

void AGViewRectItem::onItemRightClicked(QPoint pos)
{
    QGraphicsView *view = scene()->views().first();

    fileContextMenu->addAction(new QAction("Zoom to item",fileContextMenu));
    connect(fileContextMenu->actions().last(), &QAction::triggered, [=]()
    {
        view->fitInView(boundingRect()|childrenBoundingRect(), Qt::KeepAspectRatio);
    });

    fileContextMenu->actions().last()->setToolTip(tr("<p><b>%1</b></p>"
                                        "<p><i>Zooms in to %2 and it's details</i></p>"
                                              ).arg(fileContextMenu->actions().last()->text(), fileInfo.fileName()));


    fileContextMenu->addSeparator();

    fileContextMenu->addAction(new QAction("Export",fileContextMenu));
    fileContextMenu->actions().last()->setIcon(QIcon(QPixmap::fromImage(QImage(":/Spinner.gif"))));
//    fileContextMenu->actions().last()->setEnabled(!agView->isLoading);
    connect(fileContextMenu->actions().last(), &QAction::triggered, [=]()
    {
        processAction("Export");
    });

    fileContextMenu->actions().last()->setToolTip(tr("<p><b>%1</b></p>"
                                        "<p><i>Export all clips of %2</i></p>"
                                                     "<ul>"
                                                     "<li><b>Select</b>: An export window will open where export parameters can be selected.</li>"
                                                     "</ul>"
                                              ).arg(fileContextMenu->actions().last()->text(), fileInfo.fileName())); //not effective!

    int nrOfActiveJobs = 0;
    foreach (AGProcessAndThread *process, processes)
    {
        if ((process->process != nullptr && process->process->state() != QProcess::NotRunning) || (process->jobThread != nullptr && process->jobThread->isRunning()))
        {
            nrOfActiveJobs++;
        }
    }

    if (nrOfActiveJobs > 0)
    {
        fileContextMenu->addAction(new QAction("Cancel jobs",fileContextMenu));
        fileContextMenu->actions().last()->setIcon(qApp->style()->standardIcon(QStyle::SP_BrowserStop));
        connect(fileContextMenu->actions().last(), &QAction::triggered, [=]()
        {
            foreach (AGProcessAndThread *process, processes)
            {
                if ((process->process != nullptr && process->process->state() != QProcess::NotRunning) || (process->jobThread != nullptr && process->jobThread->isRunning()))
                {
                    qDebug()<<"AGViewRectItem::onItemRightClicked Killing process"<<fileInfo.fileName()<<process->name<<process->process<<process->jobThread;
                    process->kill();
                }
            }
        });
        fileContextMenu->actions().last()->setToolTip(tr("<p><b>%1</b></p>"
                                                         "<p><i>Cancel running jobs of %2</i></p>"
                                                               ).arg(fileContextMenu->actions().last()->text(), fileInfo.fileName()));
    }


    fileContextMenu->addSeparator();

    fileContextMenu->addAction(new QAction("Open in explorer",fileContextMenu));
    fileContextMenu->actions().last()->setIcon(qApp->style()->standardIcon(QStyle::SP_DirOpenIcon));
    connect(fileContextMenu->actions().last(), &QAction::triggered, [=]()
    {
        qDebug()<<"Open in explorer"<<metaObject()->className()<<fileInfo.absoluteFilePath()<<fileInfo.absolutePath()<<fileInfo.fileName();
        if (strcmp(metaObject()->className() , "MGroupRectItem") == 0)
            QDesktopServices::openUrl( QUrl::fromLocalFile( fileInfo.absolutePath()) );
        else
            QDesktopServices::openUrl( QUrl::fromLocalFile( fileInfo.absoluteFilePath()) );

    });

    fileContextMenu->actions().last()->setToolTip(tr("<p><b>%1</b></p>"
                                        "<p><i>Shows the current file or folder %2 in the explorer of your computer</i></p>"
                                              ).arg(fileContextMenu->actions().last()->text(), fileInfo.fileName())); //not effective!

    fileContextMenu->addSeparator();

    fileContextMenu->addAction(new QAction("Properties",fileContextMenu));
    fileContextMenu->actions().last()->setIcon(QIcon(QPixmap::fromImage(QImage(":/MediaSidekick.ico"))));
    connect(fileContextMenu->actions().last(), &QAction::triggered, [=]()
    {
        QDialog * dialog = new QDialog(view);
        dialog->setWindowTitle("Media Sidekick Properties");
    #ifdef Q_OS_MAC
        dialog->setWindowFlag(Qt::WindowStaysOnTopHint); //needed for MAC / OSX
    #endif

        QRect savedGeometry = QSettings().value("Geometry").toRect();
        savedGeometry.setX(savedGeometry.x() + savedGeometry.width()/4);
        savedGeometry.setY(savedGeometry.y() + savedGeometry.height()/4);
        savedGeometry.setWidth(savedGeometry.width()/2);
        savedGeometry.setHeight(savedGeometry.height()/2);
        dialog->setGeometry(savedGeometry);

        QVBoxLayout *mainLayout = new QVBoxLayout(dialog);
        QTabWidget *tabWidget = new QTabWidget(dialog);
        mainLayout->addWidget(tabWidget);

        QTabWidget *subTabWidget = new QTabWidget(tabWidget);
        tabWidget->addTab(subTabWidget, "Jobs");

        foreach (AGProcessAndThread *process, processes)
        {
            QTextBrowser *textBrowser = new QTextBrowser(subTabWidget);
            textBrowser->setWordWrapMode(QTextOption::NoWrap);
            textBrowser->setText(process->log.join("\n"));
            subTabWidget->insertTab(0, textBrowser, process->name);
        }
        subTabWidget->setCurrentIndex(0);


//        if (data(logIndex).toString() != "")
//        {
//            QTextBrowser *textBrowser = new QTextBrowser(tabWidget);
//            textBrowser->setWordWrapMode(QTextOption::NoWrap);
//            textBrowser->setText(data(logIndex).toString());
//            tabWidget->addTab(textBrowser, "Log");
//        }

        dialog->show();

        fileContextMenu->actions().last()->setToolTip(tr("<p><b>Properties</b></p>"
                                        "<p><i>Show properties for the currently selected folder</i></p>"
                                              "<ul>"
                                              "<li><b>Log</b>: Show the output of folder processes (e.g. load all items, export)</li>"
                                              "</ul>"));

    });

}

void AGViewRectItem::onProcessOutput(QTime time, QTime totalTime, QString event, QString outputString)
{
    AGProcessAndThread *processAndThread = (AGProcessAndThread *)sender();

//    qDebug()<<"AGFolderRectItem::onProcessOutput"<<processAndThread->name<<time<<event<<outputString;//thread->log.join("\n");

    if (subLogItem == nullptr)
    {
        subLogItem = new QGraphicsTextItem(this);
        subLogItem->setDefaultTextColor(Qt::white);

//                setItemProperties(subLogItem, "MediaFile", "SubLog", folderName, fileName, data(mediaDurationIndex).toInt());
        subLogItem->setData(itemTypeIndex, "SubLog");
        subLogItem->setData(mediaTypeIndex, "MediaFile");

//        subLogItem->setData(mediaDurationIndex, data(mediaDurationIndex).toInt());

        subLogItem->setPos(boundingRect().height() * 0.1, boundingRect().height() - subLogItem->boundingRect().height() ); //pos need to set here as arrangeitem not called here

        subLogItem->setTextWidth(boundingRect().width() * 0.8);
    }

    if (subLogItem != nullptr)
    {
        subLogItem->setPlainText(outputString);
    }

    if (progressRectItem == nullptr)
    {
        progressRectItem = new QGraphicsRectItem(this);

//            setItemProperties(progressRectItem, "MediaFile", "SubProgressLine", folderName, fileName, m_player->duration(), QSize());

        progressRectItem->setData(itemTypeIndex, "SubProgressLine");
        progressRectItem->setData(mediaTypeIndex, "MediaFile");

//        progressRectItem->setData(mediaDurationIndex, 60);

        progressRectItem->setPos(0, boundingRect().height() - 10 ); //pos need to set here as arrangeitem not called here
        progressRectItem->setBrush(Qt::red);
    }

    //update progressLine (as arrangeitem not called here)
    if (progressRectItem != nullptr && 60 != 0) // subProgressline already created in mediaLoaded
    {
        progressRectItem->setRect(QRectF(0,0,  progressRectItem->parentItem()->boundingRect().width() * time.msecsSinceStartOfDay() / totalTime.msecsSinceStartOfDay(), 10));
    }

    if (event == "started")
    {
        QPixmap base = QPixmap::fromImage(QImage(":/images/Folder.png")).scaledToWidth(56);
        QPixmap overlay = QPixmap::fromImage(QImage(":/Spinner.gif")).scaledToWidth(32);
        QPixmap result(base.width(), base.height());
        result.fill(Qt::transparent); // force alpha channel
        QPainter painter(&result);
        painter.drawPixmap(0, 0, base);
        painter.drawPixmap((base.width() - overlay.width()) / 2, (base.height() - overlay.height()) / 2, overlay);


//        QImage image = QImage(":/Spinner.gif");
//        QPixmap pixmap = QPixmap::fromImage(image);//.scaled(QSize(200,200 * myImage.height() / myImage.width()))
        pictureItem->setPixmap(result);
        if (base.height() != 0)
            pictureItem->setScale(200.0 * 9.0 / 16.0 / base.height() * 0.8);


//        QTimeLine *timer = new QTimeLine(5000);
//        timer->setFrameRange(0, 100);

//        QGraphicsItemAnimation *animation = new QGraphicsItemAnimation();
//        animation->setItem(pictureItem);
//        animation->setTimeLine(timer);

//        for (int i = 0; i < 200; ++i)
//            animation->setRotationAt(i, i);

//        timer->start();


//        QMovie *movie = new QMovie(":/Spinner.gif");
//        movie->setScaledSize(QSize(height()*2,height()*2));

//        subLogItem.setpl
//        setMovie(movie);


    }
    if (event == "finished" || event == "error")
    {
        QImage image = QImage(":/images/Folder.png");
        QPixmap pixmap = QPixmap::fromImage(image);//.scaled(QSize(200,200 * myImage.height() / myImage.width()))
        pictureItem->setPixmap(pixmap);
        if (image.height() != 0)
            pictureItem->setScale(200.0 * 9.0 / 16.0 / image.height() * 0.8);
    }

    if (event == "finished")
    {
        subLogItem->setPlainText("");
    }

}
