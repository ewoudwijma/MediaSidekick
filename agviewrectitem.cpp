#include "agviewrectitem.h"

#include <QSettings>

#include "agcliprectitem.h"
#include "aglobal.h"
#include "agtagtextitem.h"
#include "agview.h" //for the constants

AGViewRectItem::AGViewRectItem(QGraphicsItem *parent, QFileInfo fileInfo) :
    QGraphicsRectItem(parent)
{
    this->mediaType = "Unknown";
    this->itemType = "Base";

    this->fileInfo = fileInfo;
    setData(folderNameIndex, fileInfo.absolutePath());
    setData(fileNameIndex, fileInfo.fileName());

    this->parentRectItem = (AGViewRectItem *)parent;

    this->setFlag(QGraphicsItem::ItemIsSelectable);
    this->setAcceptHoverEvents(true);

    fileContextMenu = new QMenu();
//    setContextMenuPolicy(Qt::CustomContextMenu);
    fileContextMenu->setToolTipsVisible(true);

//    fileContextMenu->eventFilter()

    QPalette pal = fileContextMenu->palette();
    QColor menuColor;
    if (QSettings().value("theme") == "Black")
    {
        menuColor = QColor(41, 42, 45);//80,80,80);
        fileContextMenu->setStyleSheet(R"(
                                   QMenu::separator {
                                    background-color: darkgray;
                                   }
                                       QMenu {
                                        border: 1px solid darkgray;
                                       }

                                 )");
    }
    else
        menuColor = pal.window().color();

    pal.setColor(QPalette::Base, menuColor);
    pal.setColor(QPalette::Window, menuColor);
    fileContextMenu->setPalette(pal);
}

void AGViewRectItem::setItemProperties(QString mediaType, QString itemType, int duration, QSize mediaSize)
{
    setData(itemTypeIndex, itemType);
    setData(mediaTypeIndex, mediaType);

    setData(mediaDurationIndex, duration);
    setData(mediaWithIndex, mediaSize.width());
    setData(mediaHeightIndex, mediaSize.height());

    updateToolTip();
}

void AGViewRectItem::updateToolTip()
{
    QString tooltipText = "";

    QString commandControl = "Ctrl-";
#ifdef Q_OS_MAC
    commandControl = "âŒ˜-";
#endif

    AGViewRectItem *tooltipItem = this;
    if (data(itemTypeIndex).toString().contains("Sub"))
        tooltipItem = (AGViewRectItem *)parentItem();

    if (tooltipItem->data(mediaTypeIndex) == "Folder")
    {
        tooltipText += tr("<p><b>Folder %1</b></p>"
                       "<p><i>Folder with its subfolders and media files. Only <b>folders containing mediafiles</b> are shown</i></p>"
                          "<p><b>Properties</p>"
                       "<ul>"
            "<li><b>Foldername</b>: %1</li>"
                          "</ul>").arg(tooltipItem->fileInfo.absoluteFilePath());
        tooltipText += tr("<p><b>Help</p>"
                    "<ul>"
                      "<li><b>Actions</b>: Right click</li>"
                          "<li><b>Media Sidekick recycle bin</b>: not shown. Right click / Open in explorer will show the Media Sidekick recycle bin</li>"
                      "</ul>"
        );
    }
    else if (tooltipItem->data(mediaTypeIndex) == "FileGroup")
    {
        tooltipText += tr("<p><b>Filegroup %1</b></p>"
                       "<p><i>Grouping of %1 files in folder %2</i></p>"
                          "<ul>"
                          "<li><b>Sorting</b>: Files are sorted by their <u>creation date</u>. Files without creation date are shown first, in alphabetic order.</li>"
                          ).arg(tooltipItem->fileInfo.fileName(), tooltipItem->fileInfo.absolutePath());
        if (tooltipItem->fileInfo.fileName() == "Video")
            tooltipText += tr("<li><b>Supported Video files</b>: %1</li>"
                              "</ul>").arg(AGlobal().videoExtensions.join(","));
        else if (tooltipItem->fileInfo.fileName() == "Audio")
            tooltipText += tr("<li><b>Supported Audio files</b>: %1</li>"
                              "</ul>").arg(AGlobal().audioExtensions.join(","));
        else if (tooltipItem->fileInfo.fileName() == "Image")
            tooltipText += tr("<li><b>Supported Image files</b>: %1</li>"
                              "</ul>").arg(AGlobal().imageExtensions.join(","));
        else if (tooltipItem->fileInfo.fileName() == "Export")
            tooltipText += tr("<li><b>Export files</b>: Videos generated by Media Sidekick (lossless or encode). Can be openened by common video players, uploaded to social media etc.</li>"
                              "<li><b>Supported Export methods</b>: %1</li>"
                              "<li><b>Supported Export files</b>: %2</li>"
                              "</ul>").arg(AGlobal().exportMethods.join(","), AGlobal().exportExtensions.join(","));
        else if (tooltipItem->fileInfo.fileName() == "Project")
            tooltipText += tr("<li><b>Project files</b>: generated by Media Sidekick. Can be openened by video editors. Currently Shotcut and Premiere.</li>"
                              "<li><b>Supported Export methods</b>: %1</li>"
                              "<li><b>Supported Export files</b>: %2</li>"
                              "</ul>").arg(AGlobal().exportMethods.join(","), AGlobal().projectExtensions.join(","));
        else if (tooltipItem->fileInfo.fileName() == "Parking")
            tooltipText += tr("<li><b>Parking</b>: Mediafiles or clips which do not match the filter criteria are moved here (see the search field).</li>"
                              "<li><b>Timeline view</b>: Mediafiles without clips are moved to the parking (In spotview they are shown in the video and audio group).</li>"
                              "</ul>");
        else
            tooltipText += tr("<li><b>Group</b>: %2</li>"
                              "</ul>").arg(tooltipItem->fileInfo.fileName());
    }
    else if (tooltipItem->data(mediaTypeIndex) == "TimelineGroup")
    {
        tooltipText += tr("<p><b>Timeline group of %1 of folder %2</b></p>"
                       "<p><i>Showing all clips next to each other</i></p>"
                          "<ul>"
                          "<li><b>Sorting</b>: Currently sorted in order of mediafiles and within a mediafile, sorted chronologically</li>"
                          "<li><b>Transition</b>: If transition defined (%3) then clips overlapping.</li>"
                          ).arg(tooltipItem->parentRectItem->fileInfo.fileName(), tooltipItem->fileInfo.absolutePath(), AGlobal().frames_to_time(QSettings().value("transitionTime").toInt()));
    }
    else if (tooltipItem->data(mediaTypeIndex) == "MediaFile")
    {
        AGMediaFileRectItem *mediaItem = (AGMediaFileRectItem *)tooltipItem;
        tooltipText += tr("<p><b>Media file %2</b></p>"
                       "<p><i></i></p>"
                          "<p><b>Properties</p>"
                       "<ul>"
            "<li><b>Foldername</b>: %1</li>"
                          "<li><b>File name</b>: %2</li>"
                          "<li><b>File size</b>: %3</li>"
                          "<li><b>Create date</b>: %4</li>").arg(tooltipItem->fileInfo.absolutePath(), tooltipItem->fileInfo.fileName()
                                                                 , QString::number(fileInfo.size()/1024/1024) + " MB", tooltipItem->data(createDateIndex).toString());

        if (tooltipItem->data(mediaDurationIndex).toInt() != 0)
        {
            tooltipText += tr("<li><b>Duration</b>: %1 (%2 s)</li>").arg(AGlobal().msec_to_time(tooltipItem->data(mediaDurationIndex).toInt()), QString::number(tooltipItem->data(mediaDurationIndex).toInt() / 1000.0));
        }

        if (tooltipItem->data(mediaWithIndex).toInt() != -1)
            tooltipText += tr("<li><b>Size</b>: %1 * %2</li>").arg(QString::number(tooltipItem->data(mediaWithIndex).toInt()), QString::number(tooltipItem->data(mediaHeightIndex).toInt()));

        QStringList exiftoolProperties = tooltipItem->data(exifToolMetaIndex).toString().split(",");
        if (exiftoolProperties.count() != 0)
        {
            foreach (QString exiftoolProperty, exiftoolProperties) {
                QStringList keyValue = exiftoolProperty.split(" = ");
                if (keyValue.count() == 2)
                    tooltipText += tr("<li><b>%1</b>: %2</li>").arg(keyValue[0],keyValue[1]);
            }
        }

        tooltipText += tr("</ul>"
            "<p><b>Help</p>"
            "<ul>"
                          "<li><b>Actions</b>: Right click</li>"
                          "<li><b>Duration line</b>: Red or green line above. Allows comparison of duration of media files and clips</li>"
                          "<li><b>Progress line</b>: Red line below</li>"
                          "<li><b>Change playing position</b>: Shift-Hover over %1 (start playing first)</li>"
                          "</ul>"
            ).arg(tooltipItem->data(mediaTypeIndex).toString());

        tooltipText += tr("<p><b>Debug</p>""<ul>");
        tooltipText += tr("<li><b>Parent</b>: %1</li>").arg(mediaItem->parentRectItem->itemToString());
        tooltipText += tr("<li><b>Proxy</b>: %1</li>").arg(mediaItem->folderItem->itemToString());
        tooltipText += tr("<li><b>zValue</b>: %1</li>").arg(QString::number(tooltipItem->zValue()));
        tooltipText += tr("<li><b>filtered</b>: %1</li></ul>").arg(tooltipItem->data(excludedInFilter).toBool());

    }
    else if (tooltipItem->data(mediaTypeIndex) == "Clip")
    {
        AGClipRectItem *clipItem = (AGClipRectItem *)tooltipItem;
        tooltipText += tr("<p><b>Clip from %6 to %7</b></p>"
                       "<ul>"
                          "<li><b>Foldername</b>: %1</li>"
            "<li><b>Filename</b>: %2</li>"
                          "<li><b>Create date</b>: %3</li>"
             "<li><b>Duration</b>: %4 (%5 s)</li>"
                          "<li><b>In and out</b>: %6 - %7</li>"
                       "</ul>").arg(tooltipItem->fileInfo.absolutePath(), tooltipItem->fileInfo.fileName()
                                    , tooltipItem->data(createDateIndex).toString()
                                    , AGlobal().msec_to_time(tooltipItem->data(mediaDurationIndex).toInt()), QString::number(tooltipItem->data(mediaDurationIndex).toInt() / 1000.0)
                                    , AGlobal().msec_to_time(clipItem->clipIn), AGlobal().msec_to_time(clipItem->clipOut)
                         );

        tooltipText += tr("</ul>"
            "<p><b>Help</p>"
            "<ul>"
                          "<li><b>Actions</b>: Right click</li>"
                          "<li><b>Change playing position</b>: Shift-Hover over %1 (start playing first)</li>"
                          "</ul>"
            ).arg(tooltipItem->data(mediaTypeIndex).toString());

        tooltipText += tr("<p><b>Debug</p>""<ul>");
        tooltipText += tr("<li><b>Parent</b>: %1</li>").arg(clipItem->parentRectItem->itemToString());
        tooltipText += tr("<li><b>Proxy</b>: %1</li>").arg(clipItem->mediaItem->itemToString());
        tooltipText += tr("<li><b>zValue</b>: %1</li>").arg(QString::number(qint64(tooltipItem->zValue())));
        tooltipText += tr("<li><b>filtered</b>: %1</li></ul>").arg(tooltipItem->data(excludedInFilter).toBool());

    }
    else if (tooltipItem->data(mediaTypeIndex) == "Tag")
    {
        AGTagTextItem *tagItem = (AGTagTextItem *)tooltipItem;
        tooltipText += tr("<p><b>Rating, Tags and alike %1</b></p>"
                       "<p><i>Rating from * to *****, alike indicator or tag</i></p>"
                       "<ul>"
                       "</ul>"
            "<p><b>Actions</p>"
            "<ul>"
                          "<li><b>Remove</b>: Drag to bin (in next version of Media Sidekick)</li>"
            "</ul>").arg(tagItem->tagName);
    }

    if (tooltipText != "")
        setToolTip(tooltipText);
}

QString AGViewRectItem::itemToString()
{
    return fileInfo.absoluteFilePath() + " " + data(itemTypeIndex).toString() + " " + data(mediaTypeIndex).toString();// + " " + QString::number(item->zValue());
}

QVariant AGViewRectItem::itemChange(GraphicsItemChange change, const QVariant &value)
{
    if (change == ItemPositionHasChanged && scene())
    {
//        qDebug()<<"AGViewRectItem::itemChange"<<change<<value;
//        emit agItemChanged(this);
    }

    return QGraphicsRectItem::itemChange(change, value);
}

//https://forum.qt.io/topic/32869/solved-resize-qgraphicsitem-with-drag-and-drop/3

void AGViewRectItem::mousePressEvent(QGraphicsSceneMouseEvent *event)
{
    QGraphicsRectItem::mousePressEvent(event); //triggers itemselected
}

void AGViewRectItem::hoverMoveEvent(QGraphicsSceneHoverEvent *event)
{
//    qDebug()<<"AGViewRectItem::hoverMoveEvent"<<event<<this->fileInfo->fileName();

//    qDebug()<<"emit hoverPositionChanged"<<data(clipInIndex).toInt()<<data(clipOutIndex).toInt()<<event->pos()<<draggedWidth<<event->pos().x()/double(draggedWidth);

    if(event->modifiers() == Qt::ShiftModifier)
    {
//        if (event->pos().y() > rect().height() * 0.7) //only hover on timeline
        {
            int progress;

            if (mediaType == "Clip")
            {
                AGClipRectItem *clipItem = (AGClipRectItem *)this;

//                qDebug()<<"clipItem"<<clipItem->itemToString()<<clipItem->clipIn<<clipItem->clipOut;

                progress = clipItem->clipIn + (clipItem->clipOut - clipItem->clipIn) * event->pos().x()/rect().width();
            }
            else
                progress = data(mediaDurationIndex).toInt() * event->pos().x()/rect().width();

            emit hoverPositionChanged(this, progress);
        }
    }

    QGraphicsRectItem::hoverMoveEvent(event);
}

void AGViewRectItem::recursiveFileRenameCopyIfExists(QString folderName, QString fileName)
{
    bool success;
    QFile file(folderName + fileName);
    if (file.exists())
    {
        qDebug()<<"AFilesTreeView::recursiveFileRenameCopyIfExists"<<fileName<<fileName.left(fileName.lastIndexOf(".")) + "BU." + fileInfo.suffix();

        recursiveFileRenameCopyIfExists(folderName, fileName.left(fileName.lastIndexOf(".")) + "BU." + fileInfo.suffix());

        success = file.rename(folderName + fileName.left(fileName.lastIndexOf(".")) + "BU." + fileInfo.suffix());
    }
}


